[{"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\index.js":"1","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\App.js":"2","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\serviceWorker.js":"3","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\Login.js":"4","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\SignUp.js":"5","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\Wallet.js":"6","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\WalletExpenseGrid.js":"7","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\apis\\axiosExpenses.js":"8","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\Loader.js":"9","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\app\\store.js":"10","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\features\\expensesSlice.js":"11","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\features\\userSlice.js":"12","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\features\\themeSlice.js":"13","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\MenuTheme.js":"14","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\WalletFilter.js":"15","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\WalletNewExpense.js":"16","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\WalletTotalExpenses.js":"17","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\PieChart.js":"18","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\WalletTotalEarnings.js":"19","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\BarChart.js":"20"},{"size":623,"mtime":1607968639214,"results":"21","hashOfConfig":"22"},{"size":643,"mtime":1607955333587,"results":"23","hashOfConfig":"22"},{"size":5086,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":6052,"mtime":1609187584568,"results":"25","hashOfConfig":"22"},{"size":103,"mtime":1607955711459,"results":"26","hashOfConfig":"22"},{"size":5790,"mtime":1608689379160,"results":"27","hashOfConfig":"22"},{"size":1924,"mtime":1608675579626,"results":"28","hashOfConfig":"22"},{"size":133,"mtime":1607942477743,"results":"29","hashOfConfig":"22"},{"size":746,"mtime":1608026156042,"results":"30","hashOfConfig":"22"},{"size":354,"mtime":1608577125369,"results":"31","hashOfConfig":"22"},{"size":1229,"mtime":1608655389578,"results":"32","hashOfConfig":"22"},{"size":389,"mtime":1608593179731,"results":"33","hashOfConfig":"22"},{"size":463,"mtime":1608025202294,"results":"34","hashOfConfig":"22"},{"size":4478,"mtime":1608031365354,"results":"35","hashOfConfig":"22"},{"size":4203,"mtime":1608658297396,"results":"36","hashOfConfig":"22"},{"size":10480,"mtime":1608674161977,"results":"37","hashOfConfig":"22"},{"size":1819,"mtime":1608688091561,"results":"38","hashOfConfig":"22"},{"size":3724,"mtime":1608687205266,"results":"39","hashOfConfig":"22"},{"size":1813,"mtime":1608688109076,"results":"40","hashOfConfig":"22"},{"size":3999,"mtime":1608893107494,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"636ao0",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\index.js",[],["93","94"],"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\App.js",[],"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\serviceWorker.js",[],"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\Login.js",["95","96"],"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\SignUp.js",[],"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\Wallet.js",["97","98","99","100","101","102","103","104","105"],"import { Badge } from \"@material-ui/core\";\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport styles from \"./Wallet.module.css\";\r\nimport Chart from \"chart.js\";\r\nimport WalletExpenseGrid from \"./WalletExpenseGrid\";\r\nimport WalletTotalExpenses from \"./WalletTotalExpenses\";\r\nimport WalletTotalEarnings from \"./WalletTotalEarnings\";\r\nimport isEmpty from \"is-empty\";\r\nimport axiosExpenses from \"./apis/axiosExpenses\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  setExpenses,\r\n  setDateFrom,\r\n  setDateTo,\r\n  setSubExpenses,\r\n} from \"./features/expensesSlice\";\r\nimport { setUser } from \"./features/userSlice\";\r\nimport Loader from \"./Loader\";\r\nimport MenuTheme from \"./MenuTheme\";\r\nimport BarChart from \"./BarChart\";\r\nimport PieChart from \"./PieChart\";\r\nimport WalletFilter from \"./WalletFilter\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { teal, deepOrange } from \"@material-ui/core/colors\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport walletLogo from \"./img/wallet.png\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n  },\r\n  searchIconWrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 2),\r\n  },\r\n  searchBar: {\r\n    display: \"flex\",\r\n    backgroundColor: teal[400],\r\n    borderRadius: 4,\r\n    \"&:hover\": {\r\n      backgroundColor: teal[300],\r\n    },\r\n  },\r\n  appBar: {\r\n    backgroundColor: teal[600],\r\n    display: \"flex\",\r\n  },\r\n  appBarIcon: {\r\n    color: \"white\",\r\n    fontSize: 30,\r\n    focusVisible: false,\r\n    \"&:focus\": {\r\n      color: deepOrange[500],\r\n    },\r\n  },\r\n  rowChart: {\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n  logo: {\r\n    position: \"relative\",\r\n    width: 40,\r\n    height: 40,\r\n    marginRight: 20,\r\n  },\r\n  titleLogo: {\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nfunction Wallet() {\r\n  const classes = useStyles();\r\n\r\n  // useState variables\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Redux : dispatch and selectors\r\n  const dispatch = useDispatch();\r\n  const dateFromSelector = useSelector((state) => state.expenses.dateFrom);\r\n  const dateToSelector = useSelector((state) => state.expenses.dateTo);\r\n  const reload = useSelector((state) => state.expenses.reload);\r\n  const alertAdd = useSelector((state) => state.expenses.alertAdd);\r\n\r\n  // useEffect\r\n  useEffect(() => {\r\n    // Fetch expenses from DB\r\n    (async () => {\r\n      const userId = \"5f04994667fcbfe11f771712\";\r\n      const URL = `/expenses?userId=${userId}`;\r\n      setIsLoading(true);\r\n\r\n      const response = await axiosExpenses.get(URL);\r\n      setIsLoading(false);\r\n\r\n      const content = [];\r\n      for (let expense of response.data) {\r\n        let temp = {};\r\n        temp.id = expense._id;\r\n        temp.userId = expense.userId;\r\n        temp.date = parseInt(expense.date);\r\n        temp.name = expense.name;\r\n        temp.categories = expense.categories;\r\n        temp.source_type = expense.source_type;\r\n        temp.type = expense.type;\r\n        temp.amount = parseFloat(expense.amount);\r\n        temp.currency = expense.currency;\r\n        delete expense._id;\r\n        content.push(temp);\r\n      }\r\n      dispatch(setUser(userId));\r\n      dispatch(setExpenses(content));\r\n    })();\r\n  }, [reload]);\r\n\r\n  return (\r\n    <div className={styles.wallet}>\r\n      {/* Navigation Bar */}\r\n      <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <div className={classes.root}>\r\n            <img src={walletLogo} alt=\"logo\" className={classes.logo} />\r\n            <h3 className={classes.logoTitle}>Wallet</h3>\r\n          </div>\r\n          <div className={classes.grow} />\r\n          <div className={classes.root}>\r\n            <h3 className={classes.logoTitle}>\r\n              {dateFromSelector} / {dateToSelector}\r\n            </h3>\r\n          </div>\r\n          <div className={classes.grow} />\r\n          <div className={classes.root}>\r\n            <MenuTheme />\r\n\r\n            <IconButton>\r\n              <Badge badgeContent={4} color=\"secondary\">\r\n                <ChatIcon className={classes.appBarIcon} />\r\n              </Badge>\r\n            </IconButton>\r\n            <IconButton>\r\n              <Badge badgeContent=\"\" color=\"secondary\">\r\n                <AccountCircleIcon className={classes.appBarIcon} />\r\n              </Badge>\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={styles.mainContainer}>\r\n        {/* Filters */}\r\n        <WalletFilter />\r\n        {/* Big Focus */}\r\n        <div className={classes.rowChart}>\r\n          <WalletTotalExpenses />\r\n          <WalletTotalEarnings />\r\n        </div>\r\n        {/* Chart Expenses */}\r\n        <div className={classes.rowChart}>\r\n          <BarChart />\r\n          <PieChart />\r\n        </div>\r\n        {/* Grid Expenses */}\r\n        <div className={styles.boxExpenseGrid}>\r\n          {isLoading ? <Loader /> : <WalletExpenseGrid />}\r\n        </div>\r\n        {/* <Snackbar\r\n          anchorOrigin={(\"bottom\", \"left\")}\r\n          open={!isEmpty(alertAdd) ? true : false}\r\n          message={\r\n            alertAdd === \"success\"\r\n              ? \" SUCCESS : New expense added\"\r\n              : \"Something wrong occured during insertion\"\r\n          }\r\n          key={\"bottomleft\"}\r\n        /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Wallet;\r\n","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\WalletExpenseGrid.js",["106","107","108","109","110"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport isEmpty from \"is-empty\";\r\nimport Loader from \"./Loader\";\r\nimport moment from \"moment\";\r\n\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = (theme) => ({\r\n  grid: {\r\n    overflow: \"scroll\",\r\n  },\r\n});\r\n\r\nfunction WalletExpenseGrid() {\r\n  const classes = useStyles();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // selectors Redux\r\n  const subExpenses = useSelector((state) => state.expenses.subExpenses);\r\n\r\n  // rows\r\n  const rows = [];\r\n  for (let expense of subExpenses) {\r\n    const temp = {};\r\n    temp.id = expense.id;\r\n    temp.userId = expense.userId;\r\n    let date = new Date(expense.date);\r\n    temp.date = date;\r\n    temp.name = expense.name;\r\n    temp.amount = expense.amount;\r\n    temp.categories = expense.categories;\r\n    temp.currency = expense.currency;\r\n    temp.type = expense.type;\r\n    temp.source_type = expense.source_type;\r\n    rows.push(temp);\r\n  }\r\n\r\n  // columns\r\n  const columns = [\r\n    { field: \"id\", headerName: \"ID\", width: 300 },\r\n    { field: \"userId\", headerName: \"USER ID\", width: 300 },\r\n    { field: \"date\", headerName: \"DATE\", width: 300 },\r\n    { field: \"name\", headerName: \"NAME\", width: 300 },\r\n    { field: \"categories\", headerName: \"CATEGORIES\", width: 300 },\r\n    { field: \"amount\", headerName: \"AMOUNT\", width: 300 },\r\n    { field: \"currency\", headerName: \"CURRENCY\", width: 300 },\r\n    { field: \"type\", headerName: \"TYPE\", width: 300 },\r\n    { field: \"source_type\", headerName: \"SOURCE TYPE\", width: 300 },\r\n  ];\r\n\r\n  if (isLoading) return <Loader />;\r\n\r\n  // Fulfill column names\r\n\r\n  return (\r\n    <DataGrid\r\n      rows={rows}\r\n      columns={columns}\r\n      pageSize={10}\r\n      checkboxSelection\r\n      className={classes.grid}\r\n    />\r\n  );\r\n}\r\n\r\nexport default WalletExpenseGrid;\r\n","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\apis\\axiosExpenses.js",[],"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\Loader.js",["111","112","113"],"import React, { useEffect } from \"react\";\r\nimport styles from \"./WalletExpenseGrid.module.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setWalletTheme } from \"./features/themeSlice\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nfunction Loader() {\r\n  const themeWallet = useSelector((state) => state.theme).wallet;\r\n\r\n  const useStyles = makeStyles(() => ({\r\n    progress: {\r\n      margin: \"auto\",\r\n      color: themeWallet,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={styles.walletExpenseGrid}>\r\n      <CircularProgress className={classes.progress} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\app\\store.js",[],"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\features\\expensesSlice.js",[],"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\features\\userSlice.js",[],"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\features\\themeSlice.js",[],"D:\\Projects\\Javascript\\Expenses\\expenses\\src\\MenuTheme.js",["114"],"import React, { useRef } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  teal,\r\n  blue,\r\n  cyan,\r\n  amber,\r\n  grey,\r\n  deepOrange,\r\n} from \"@material-ui/core/colors\";\r\nimport ColorLensIcon from \"@material-ui/icons/ColorLens\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  appBarIcon: {\r\n    color: \"white\",\r\n    fontSize: 30,\r\n    \"&:focus\": {\r\n      color: deepOrange[500],\r\n    },\r\n  },\r\n  color1: {\r\n    backgroundColor: teal[600],\r\n    margin: 2,\r\n    height: 40,\r\n    width: 40,\r\n    \"&:hover\": {\r\n      // border: \"2px solid lightgrey\",\r\n      backgroundColor: teal[500],\r\n    },\r\n  },\r\n  color2: {\r\n    backgroundColor: blue[600],\r\n    margin: 2,\r\n    height: 40,\r\n    width: 40,\r\n    \"&:hover\": {\r\n      // border: \"2px solid lightgrey\",\r\n      backgroundColor: blue[500],\r\n    },\r\n  },\r\n  color3: {\r\n    backgroundColor: cyan[600],\r\n    margin: 2,\r\n    height: 40,\r\n    width: 40,\r\n    \"&:hover\": {\r\n      // border: \"2px solid lightgrey\",\r\n      backgroundColor: cyan[500],\r\n    },\r\n  },\r\n  color4: {\r\n    backgroundColor: amber[600],\r\n    margin: 2,\r\n    height: 40,\r\n    width: 40,\r\n    \"&:hover\": {\r\n      // border: \"2px solid lightgrey\",\r\n      backgroundColor: amber[500],\r\n    },\r\n  },\r\n  color5: {\r\n    backgroundColor: grey[600],\r\n    margin: 2,\r\n    height: 40,\r\n    width: 40,\r\n    \"&:hover\": {\r\n      // border: \"2px solid lightgrey\",\r\n      backgroundColor: grey[500],\r\n    },\r\n  },\r\n  color6: {\r\n    backgroundColor: deepOrange[600],\r\n    margin: 2,\r\n    height: 40,\r\n    width: 40,\r\n    \"&:hover\": {\r\n      // border: \"2px solid lightgrey\",\r\n      backgroundColor: deepOrange[500],\r\n    },\r\n  },\r\n  menuList: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    width: 152,\r\n    padding: 10,\r\n  },\r\n}));\r\n\r\nexport default function MenuTheme() {\r\n  const colorPalette = [1, 2, 3, 4, 5, 6];\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = useRef(null);\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  function handleListKeyDown(event) {\r\n    if (event.key === \"Tab\") {\r\n      event.preventDefault();\r\n      setOpen(false);\r\n    }\r\n  }\r\n\r\n  // return focus to the button when we transitioned from !open -> open\r\n  const prevOpen = React.useRef(open);\r\n  React.useEffect(() => {\r\n    if (prevOpen.current === true && open === false) {\r\n      anchorRef.current.focus();\r\n    }\r\n\r\n    prevOpen.current = open;\r\n  }, [open]);\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        ref={anchorRef}\r\n        aria-controls={open ? \"menu-list-grow\" : undefined}\r\n        aria-haspopup=\"true\"\r\n        onClick={handleToggle}\r\n      >\r\n        <ColorLensIcon className={classes.appBarIcon} />\r\n      </IconButton>\r\n      <Popper\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n      >\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n            }}\r\n          >\r\n            <Paper>\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList\r\n                  className={classes.menuList}\r\n                  autoFocusItem={open}\r\n                  id=\"menu-list-grow\"\r\n                  onKeyDown={handleListKeyDown}\r\n                >\r\n                  {colorPalette.map((colorNum) => (\r\n                    <MenuItem\r\n                      onClick={handleClose}\r\n                      className={classes[\"color\" + colorNum]}\r\n                    />\r\n                  ))}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\WalletFilter.js",["115","116","117","118","119"],"import React, { useRef, useEffect, useState } from \"react\";\r\n\r\n// Redux Import\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setExpenses,\r\n  setDateFrom,\r\n  setDateTo,\r\n  setSubExpenses,\r\n} from \"./features/expensesSlice\";\r\nimport WalletNewExpense from \"./WalletNewExpense\";\r\n\r\n// Styling import\r\nimport styles from \"./WalletFilter.module.css\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { teal, grey } from \"@material-ui/core/colors\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  datePicker: {\r\n    width: 200,\r\n  },\r\n  dateRangeButton: {\r\n    fontWeight: \"bold\",\r\n    color: grey[600],\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  refreshButton: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: teal[500],\r\n    color: \"white\",\r\n    borderRadius: \"100vh\",\r\n    padding: 10,\r\n    marginLeft: 20,\r\n    \"&:hover\": {\r\n      backgroundColor: teal[300],\r\n    },\r\n  },\r\n  refreshIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction WalletFilter() {\r\n  // Styling function\r\n  const classes = useStyles();\r\n\r\n  // useRef variables\r\n  const dateFromRef = useRef(null);\r\n  const dateToRef = useRef(null);\r\n\r\n  // Dispatch for Reducer Redux\r\n  const dispatch = useDispatch();\r\n\r\n  // Selector of redux data store\r\n  const expenses = useSelector((state) => state.expenses.expenses);\r\n  const subExpenses = useSelector((state) => state.expenses.subExpenses);\r\n\r\n  // Functions\r\n\r\n  const selectData = (from, to) => {\r\n    // convert date from String to Date\r\n    from = new Date(from);\r\n    to = new Date(to);\r\n    const subExp = [];\r\n\r\n    // select data of expenses.expenses Slice between from and to\r\n    expenses.forEach((expense) => {\r\n      let expenseDate = new Date(expense.date);\r\n      if (expenseDate >= from && expenseDate <= to) {\r\n        subExp.push(expense);\r\n      }\r\n    });\r\n\r\n    dispatch(setSubExpenses(subExp));\r\n  };\r\n\r\n  const dataRefresh = (e) => {\r\n    e.preventDefault();\r\n\r\n    const from = dateFromRef.current.value;\r\n    const to = dateToRef.current.value;\r\n\r\n    // save date to Redux store\r\n    dispatch(setDateFrom(from));\r\n    dispatch(setDateTo(to));\r\n\r\n    selectData(from, to);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const from = dateFromRef.current.value;\r\n    const to = dateToRef.current.value;\r\n    selectData(from, to);\r\n  }, [expenses]);\r\n\r\n  return (\r\n    <div className={`${styles.filterSection} ${styles.box}`}>\r\n      <div className={styles.columnBox}>\r\n        <div className={styles.datePickerSection}>\r\n          <TextField\r\n            inputRef={dateFromRef}\r\n            label=\"From\"\r\n            type=\"date\"\r\n            defaultValue=\"1970-01-01\"\r\n            className={classes.datePicker}\r\n          />\r\n          <TextField\r\n            inputRef={dateToRef}\r\n            label=\"To\"\r\n            type=\"date\"\r\n            defaultValue=\"1970-01-01\"\r\n            className={classes.datePicker}\r\n          />\r\n        </div>\r\n        {/* <ButtonGroup\r\n          variant=\"text\"\r\n          color=\"primary\"\r\n          aria-label=\"text primary button group\"\r\n        >\r\n          <Button className={classes.dateRangeButton}>1D</Button>\r\n          <Button className={classes.dateRangeButton}>5D</Button>\r\n          <Button className={classes.dateRangeButton}>1M</Button>\r\n          <Button className={classes.dateRangeButton}>6M</Button>\r\n          <Button className={classes.dateRangeButton}>YTD</Button>\r\n          <Button className={classes.dateRangeButton}>1Y</Button>\r\n          <Button className={classes.dateRangeButton}>5Y</Button>\r\n          <Button className={classes.dateRangeButton}>Max</Button>\r\n        </ButtonGroup> */}\r\n      </div>\r\n      <Button className={classes.refreshButton} onClick={(e) => dataRefresh(e)}>\r\n        <RefreshIcon className={classes.refreshIcon} />\r\n        Refresh\r\n      </Button>\r\n      <div className={classes.grow} />\r\n\r\n      <WalletNewExpense />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WalletFilter;\r\n","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\WalletNewExpense.js",["120","121","122","123","124"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport axiosExpenses from \"./apis/axiosExpenses\";\r\nimport {\r\n  setExpenses,\r\n  switchReload,\r\n  changeAlertAdd,\r\n} from \"./features/expensesSlice\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport isEmpty from \"is-empty\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport { CenterFocusStrong, FullscreenExit } from \"@material-ui/icons\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { teal, grey, deepOrange } from \"@material-ui/core/colors\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { IconFlagUS, IconFlagEU, IconFlagUK } from \"material-ui-flags\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  newExpenseButton: {\r\n    width: 70,\r\n    height: 70,\r\n    \"&:active\": {\r\n      border: \"none\",\r\n    },\r\n    \"&:visited\": {},\r\n  },\r\n  newExpenseIcon: {\r\n    color: teal[600],\r\n    width: 70,\r\n    height: 70,\r\n    \"&:hover\": {\r\n      color: teal[300],\r\n    },\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"white\",\r\n    paddingTop: 50,\r\n    paddingBottom: 50,\r\n    width: 500,\r\n    borderRadius: 6,\r\n  },\r\n  space: {\r\n    height: 50,\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  submitButton: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: teal[500],\r\n    color: \"white\",\r\n    justifySelf: \"end\",\r\n    borderRadius: \"50vh\",\r\n    \"&:hover\": {\r\n      backgroundColor: teal[800],\r\n    },\r\n  },\r\n  cancelButton: {\r\n    color: grey[500],\r\n    justifySelf: \"end\",\r\n    borderRadius: \"50vh\",\r\n    \"&:hover\": {\r\n      color: grey[800],\r\n    },\r\n  },\r\n  textField: {\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n    width: \"100%\",\r\n  },\r\n  addCategoryButton: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: \"50vh\",\r\n    color: \"white\",\r\n    backgroundColor: deepOrange[500],\r\n    height: \"auto\",\r\n    padding: \"0 0 0 0\",\r\n    \"&:hover\": {\r\n      backgroundColor: deepOrange[300],\r\n    },\r\n  },\r\n  rowBox: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    width: \"100%\",\r\n  },\r\n  alignRight: {\r\n    justifySelf: \"flex-end\",\r\n    alignSelf: \"flex-end\",\r\n  },\r\n  alignLeft: {\r\n    justifySelf: \"flex-start\",\r\n    alignSelf: \"flex-start\",\r\n  },\r\n}));\r\n\r\nfunction WalletNewExpense() {\r\n  const classes = useStyles();\r\n\r\n  // default lists\r\n  const listCategory = [\r\n    \"Groceries\",\r\n    \"Shopping\",\r\n    \"Bill\",\r\n    \"Rent payment\",\r\n    \"Entertainment\",\r\n    \"Other\",\r\n  ];\r\n\r\n  const listCurrencies = [\r\n    { value: \"EUR\", flag: <IconFlagEU /> },\r\n    { value: \"USD\", flag: <IconFlagUS /> },\r\n    { value: \"GBP\", flag: <IconFlagUK /> },\r\n  ];\r\n\r\n  const typeList = [\"Cash\", \"Credit Card\"];\r\n  const sourceTypeList = [\r\n    \"Cash\",\r\n    \"Revolut\",\r\n    \"Caisse Epargne\",\r\n    \"BNP Paribas\",\r\n    \"Societe Generale\",\r\n    \"HSBC\",\r\n    \"Credit agricole\",\r\n    \"Boursorama\",\r\n    \"Other\",\r\n  ];\r\n\r\n  // useState\r\n  const [open, setOpen] = useState(false);\r\n  const [name, setName] = useState();\r\n  const [date, setDate] = useState();\r\n  const [categoryList, setCategoryList] = useState([]);\r\n  const [category, setCategory] = useState(listCategory[0]);\r\n  const [amount, setAmount] = useState(0);\r\n  const [currency, setCurrency] = useState(listCurrencies[0]);\r\n  const [type, setType] = useState(typeList[0]);\r\n  const [sourceType, setSourceType] = useState(sourceTypeList[0]);\r\n\r\n  //useSelector\r\n  const userId = useSelector((state) => state.user.userId);\r\n\r\n  // useDispatch\r\n  const dispatch = useDispatch();\r\n\r\n  const handleCategory = (val) => {\r\n    if (!isEmpty(val)) {\r\n      if (!categoryList.includes(val)) {\r\n        const copyCategoryList = categoryList.slice();\r\n        copyCategoryList.push(val);\r\n        setCategoryList(copyCategoryList);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    // Reinitialise the state\r\n    setName();\r\n    setDate();\r\n    setCategory();\r\n    setCategoryList([]);\r\n    setAmount();\r\n    setCurrency();\r\n    setType();\r\n    setSourceType();\r\n    setOpen(false);\r\n  };\r\n\r\n  const addNewExpense = async (e) => {\r\n    e.preventDefault();\r\n    // create new Expense\r\n    let newExpense = {};\r\n    newExpense.userId = userId;\r\n    newExpense.type = type;\r\n    newExpense.source_type = sourceType;\r\n    newExpense.date = parseInt(Date.parse(date));\r\n    newExpense.categories = categoryList;\r\n    newExpense.name = name;\r\n    newExpense.amount = parseInt(amount);\r\n    newExpense.currency = currency;\r\n\r\n    // Push to Database\r\n    const response = await axiosExpenses.post(\"/expense\", newExpense);\r\n\r\n    // Close the modal\r\n    if (response.status === 200) {\r\n      dispatch(switchReload());\r\n      dispatch(changeAlertAdd(\"success\"));\r\n    } else {\r\n      dispatch(changeAlertAdd(\"error\"));\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(categoryList);\r\n  }, [categoryList]);\r\n\r\n  return (\r\n    <div>\r\n      <IconButton className={classes.newExpenseButton} onClick={handleOpen}>\r\n        <AddCircleIcon className={classes.newExpenseIcon} />\r\n      </IconButton>\r\n      <Modal\r\n        aria-labelledby=\"Modal-create-new-expense\"\r\n        aria-describedby=\"Modal-create-new-expense\"\r\n        className={classes.modal}\r\n        open={open}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n            <h2>New Expense</h2>\r\n            <form className={classes.form}>\r\n              <TextField\r\n                required\r\n                multiline\r\n                className={classes.textField}\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <TextField\r\n                required\r\n                className={classes.textField}\r\n                type=\"date\"\r\n                label=\"Date\"\r\n                onChange={(e) => setDate(e.target.value)}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n              />\r\n              <TextField\r\n                select\r\n                type=\"text\"\r\n                label=\"Category\"\r\n                className={classes.textField}\r\n                value={category ? category : listCategory[0]}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n              >\r\n                {listCategory.map((cat) => (\r\n                  <MenuItem key={cat} value={cat}>\r\n                    {cat}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n              <Button\r\n                className={`${classes.addCategoryButton} ${classes.alignRight}`}\r\n                onClick={() => handleCategory(category)}\r\n              >\r\n                <AddIcon />\r\n                Add\r\n              </Button>\r\n              {categoryList.map((category) => (\r\n                <p key={uuidv4()}>{category}</p>\r\n              ))}\r\n\r\n              <TextField\r\n                required\r\n                type=\"number\"\r\n                label=\"Amount\"\r\n                className={classes.textField}\r\n                onChange={(e) => setAmount(e.target.value)}\r\n              />\r\n              <TextField\r\n                required\r\n                select\r\n                type=\"text\"\r\n                label=\"Currency\"\r\n                value={currency ? currency : listCurrencies[0].value}\r\n                className={classes.textField}\r\n                onChange={(e) => setCurrency(e.target.value)}\r\n              >\r\n                {listCurrencies.map((currency) => (\r\n                  <MenuItem key={uuidv4()} value={currency.value}>\r\n                    {currency.flag} {currency.value}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n              <TextField\r\n                select\r\n                type=\"text\"\r\n                label=\"Type\"\r\n                value={type ? type : typeList[0]}\r\n                className={classes.textField}\r\n                onChange={(e) => setType(e.target.value)}\r\n              >\r\n                {typeList.map((type) => (\r\n                  <MenuItem id={uuidv4()} value={type}>\r\n                    {type}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n              <TextField\r\n                select\r\n                type=\"text\"\r\n                label=\"Source Type\"\r\n                value={sourceType ? sourceType : sourceTypeList[0]}\r\n                className={classes.textField}\r\n                onChange={(e) => setSourceType(e.target.value)}\r\n              >\r\n                {sourceTypeList.map((sourceType) => (\r\n                  <MenuItem id={uuidv4()} value={sourceType}>\r\n                    {sourceType}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n              <div className={classes.space} />\r\n              <div className={`${classes.rowBox} ${classes.alignRight}`}>\r\n                <Button\r\n                  className={`${classes.cancelButton} ${classes.alignRight}`}\r\n                  onClick={(e) => handleClose(e)}\r\n                >\r\n                  CANCEL\r\n                </Button>\r\n                <Button\r\n                  className={`${classes.submitButton} ${classes.alignRight}`}\r\n                  type=\"submit\"\r\n                  onClick={(e) => addNewExpense(e)}\r\n                >\r\n                  <AddIcon />\r\n                  ADD NEW EXPENSE\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WalletNewExpense;\r\n","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\WalletTotalExpenses.js",["125","126","127"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"is-empty\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { PlayCircleFilledWhite } from \"@material-ui/icons\";\r\nimport { teal, deepOrange } from \"@material-ui/core/colors\";\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    boxShadow: \"0 0 10px 0 rgba(150, 150, 150, 0.3)\",\r\n    borderRadius: 4,\r\n    padding: 10,\r\n    backgroundColor: deepOrange[700],\r\n    color: \"white\",\r\n    margin: 10,\r\n    width: \"50vw\",\r\n    maxHeight: 200,\r\n  },\r\n  columnBox: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n  icon: {\r\n    color: \"white\",\r\n    width: 70,\r\n    height: 70,\r\n  },\r\n}));\r\n\r\nfunction WalletTotalExpenses() {\r\n  //useStyles\r\n  const classes = useStyles();\r\n  // useState\r\n  const [total, setTotal] = useState();\r\n\r\n  // useSelector\r\n  const subExpenses = useSelector((state) => state.expenses.subExpenses);\r\n\r\n  // Functions\r\n  const getTotalSubExpenses = () => {\r\n    let result = 0;\r\n    if (!isEmpty(subExpenses)) {\r\n      for (let expense of subExpenses) {\r\n        result += expense.amount;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  //useEffect\r\n\r\n  useEffect(() => {\r\n    setTotal(getTotalSubExpenses());\r\n  }, [subExpenses]);\r\n\r\n  return (\r\n    <div className={classes.mainContainer}>\r\n      <div className={classes.columnBox}>\r\n        <h7>Total Expenses (EUR)</h7>\r\n        <h2>{total}</h2>\r\n      </div>\r\n      <MonetizationOnIcon className={classes.icon} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WalletTotalExpenses;\r\n","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\PieChart.js",["128","129","130","131","132","133"],"import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport { Line, Bar, Doughnut } from \"react-chartjs-2\";\r\nimport Loader from \"./Loader\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport styles from \"./PieChart.module.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport classes from \"./PieChart.module.css\";\r\nimport {\r\n  red,\r\n  deepPurple,\r\n  indigo,\r\n  cyan,\r\n  teal,\r\n  green,\r\n  lime,\r\n  yellow,\r\n  deepOrange,\r\n} from \"@material-ui/core/colors\";\r\nimport { relativeTimeRounding } from \"moment\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  chart: {\r\n    flexGrow: 1,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n  },\r\n  chartsketch: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    marginBottom: 20,\r\n    alignSelf: \"start\",\r\n    justifySelf: \"start\",\r\n  },\r\n}));\r\n\r\nfunction PieChart() {\r\n  // List of colors\r\n  const colorList = [\r\n    { bcg: red[300], border: red[700] },\r\n    { bcg: deepPurple[300], border: deepPurple[700] },\r\n    { bcg: indigo[300], border: indigo[700] },\r\n    { bcg: cyan[300], border: cyan[700] },\r\n    { bcg: teal[300], border: teal[700] },\r\n    { bcg: green[300], border: green[700] },\r\n    { bcg: lime[300], border: lime[700] },\r\n    { bcg: yellow[300], border: yellow[700] },\r\n    { bcg: deepOrange[300], border: deepOrange[700] },\r\n  ];\r\n  const classes = useStyles();\r\n  const [data, setData] = useState();\r\n  const [options, setOptions] = useState();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // useRef\r\n  const ExpenseChartRef = useRef(null);\r\n\r\n  // Selector\r\n  let subExpenses = useSelector((state) => state.expenses.subExpenses);\r\n\r\n  const consolidateData = (arr) => {\r\n    let tempObj = {};\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    arr.forEach((expense) => {\r\n      expense.categories.forEach((category) => {\r\n        if (tempObj[category]) {\r\n          tempObj[category] += expense.amount;\r\n        } else {\r\n          tempObj[category] = expense.amount;\r\n        }\r\n      });\r\n    });\r\n\r\n    for (const [key, value] of Object.entries(tempObj)) {\r\n      labels.push(key);\r\n      data.push(value);\r\n    }\r\n    return { labels: labels, data: data };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { labels, data } = consolidateData(subExpenses);\r\n\r\n    // select colors\r\n    const nbColors = labels.length;\r\n    const nbColorsInList = colorList.length;\r\n    const savedColors = [];\r\n    const bcgColors = [];\r\n    const borderColors = [];\r\n    let num = 0;\r\n\r\n    for (let i = 0; i < nbColors; i++) {\r\n      do {\r\n        num = Math.round(Math.random() * 100) % nbColorsInList;\r\n      } while (savedColors.includes(num));\r\n\r\n      savedColors.push(num);\r\n      bcgColors.push(colorList[num].bcg);\r\n      borderColors.push(colorList[num].border);\r\n    }\r\n\r\n    setData({\r\n      datasets: [\r\n        {\r\n          data: data,\r\n          backgroundColor: bcgColors,\r\n          borderColor: borderColors,\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n      labels: labels,\r\n    });\r\n\r\n    setOptions({\r\n      legend: {\r\n        display: true,\r\n        position: \"bottom\",\r\n        labels: {\r\n          fontColor: \"white\",\r\n          fontSize: 16,\r\n        },\r\n      },\r\n    });\r\n\r\n    setIsLoading(false);\r\n  }, [subExpenses]);\r\n\r\n  if (isLoading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.box}>\r\n      <h1 className={classes.title}>Categories</h1>\r\n      <div className={classes.chart}>\r\n        <Doughnut\r\n          data={data}\r\n          options={options}\r\n          className={classes.chartsketch}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PieChart;\r\n","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\WalletTotalEarnings.js",["134","135","136"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"is-empty\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { PlayCircleFilledWhite } from \"@material-ui/icons\";\r\nimport { teal, deepOrange } from \"@material-ui/core/colors\";\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    boxShadow: \"0 0 10px 0 rgba(150, 150, 150, 0.3)\",\r\n    borderRadius: 4,\r\n    padding: 10,\r\n    backgroundColor: teal[200],\r\n    color: \"white\",\r\n    margin: 10,\r\n    width: \"50vw\",\r\n    maxHeight: 200,\r\n  },\r\n  columnBox: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n  icon: {\r\n    color: \"white\",\r\n    width: 70,\r\n    height: 70,\r\n  },\r\n}));\r\n\r\nfunction WalletTotalEarnings() {\r\n  //useStyles\r\n  const classes = useStyles();\r\n  // useState\r\n  const [total, setTotal] = useState();\r\n\r\n  // useSelector\r\n  const subExpenses = useSelector((state) => state.expenses.subExpenses);\r\n\r\n  // Functions\r\n  const getTotalSubExpenses = () => {\r\n    let result = 0;\r\n    if (!isEmpty(subExpenses)) {\r\n      for (let expense of subExpenses) {\r\n        result += expense.amount;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  //useEffect\r\n\r\n  useEffect(() => {\r\n    setTotal(getTotalSubExpenses());\r\n  }, [subExpenses]);\r\n\r\n  return (\r\n    <div className={classes.mainContainer}>\r\n      <div className={classes.columnBox}>\r\n        <h7>Total Earnings (EUR)</h7>\r\n        <h2>{total}</h2>\r\n      </div>\r\n      <MonetizationOnIcon className={classes.icon} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WalletTotalEarnings;\r\n","D:\\Projects\\Javascript\\Expenses\\expenses\\src\\BarChart.js",["137","138","139","140"],"import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport Loader from \"./Loader\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport styles from \"./BarChart.module.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport classes from \"./BarChart.module.css\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  chart: {\r\n    flexGrow: 1,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    marginBottom: 20,\r\n    alignSelf: \"start\",\r\n    justifySelf: \"start\",\r\n  },\r\n}));\r\n\r\nfunction BarChart() {\r\n  const classes = useStyles();\r\n  const [data, setData] = useState();\r\n  const [options, setOptions] = useState();\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // useRef\r\n  const ExpenseChartRef = useRef(null);\r\n\r\n  // Selector\r\n  let subExpenses = useSelector((state) => state.expenses.subExpenses);\r\n\r\n  const consolidateData = (arr) => {\r\n    let consolidated_arr = [];\r\n    let tempObj = {};\r\n\r\n    arr.forEach((expense) => {\r\n      if (tempObj[expense.date]) {\r\n        tempObj[expense.date.toString()] += expense.amount;\r\n      } else {\r\n        tempObj[expense.date.toString()] = expense.amount;\r\n      }\r\n    });\r\n\r\n    for (const [key, value] of Object.entries(tempObj)) {\r\n      // let date = new Date(parseInt(key));\r\n      let date = parseInt(key);\r\n      consolidated_arr.push({ x: date, y: value });\r\n    }\r\n    consolidated_arr = consolidated_arr.sort((a, b) => a.x - b.x);\r\n    return consolidated_arr;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let copy_arr = subExpenses.slice();\r\n    copy_arr = copy_arr.sort((a, b) => b.date - a.date);\r\n\r\n    const chartData = consolidateData(copy_arr);\r\n\r\n    setData({\r\n      datasets: [\r\n        {\r\n          label: \"Expenses\",\r\n          data: chartData,\r\n          backgroundColor: blue[200],\r\n          borderColor: blue[700],\r\n          pointBorderColor: blue[700],\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    });\r\n\r\n    setOptions({\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              beginAtZero: true,\r\n              autoSkip: true,\r\n              maxTicksLimit: 10,\r\n              fontColor: \"white\",\r\n            },\r\n            gridLines: {\r\n              display: true,\r\n              color: \"rgba(255,255,255,.3)\",\r\n            },\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Amount per day\",\r\n              fontColor: \"rgb(255,255,255)\",\r\n            },\r\n          },\r\n        ],\r\n        xAxes: [\r\n          {\r\n            gridLines: {\r\n              display: true,\r\n              color: \"rgba(255,255,255,.3)\",\r\n            },\r\n            type: \"time\",\r\n            ticks: {\r\n              autoSkip: true,\r\n              maxTicksLimit: 10,\r\n              fontColor: \"white\",\r\n            },\r\n            time: {\r\n              displayFormats: {\r\n                day: \"MMM D\",\r\n              },\r\n            },\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Date\",\r\n              fontColor: \"rgb(255,255,255)\",\r\n            },\r\n            distribution: \"linear\",\r\n          },\r\n        ],\r\n      },\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        display: true,\r\n        position: \"bottom\",\r\n        labels: {\r\n          fontColor: \"white\",\r\n          fontSize: 16,\r\n        },\r\n      },\r\n    });\r\n\r\n    setIsLoading(false);\r\n  }, [subExpenses]);\r\n\r\n  if (isLoading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.box}>\r\n      <h1 className={classes.title}>Daily Chart</h1>\r\n      <div className={styles.chart}>\r\n        <Bar data={data} options={options} />\r\n      </div>\r\n    </div>\r\n  );\r\n  // return <div ref={ExpenseChartRef} id=\"chart\"></div>;\r\n}\r\n\r\nexport default BarChart;\r\n",{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":60,"column":10,"nodeType":"147","messageId":"148","endLine":60,"endColumn":31},{"ruleId":"145","severity":1,"message":"149","line":60,"column":33,"nodeType":"147","messageId":"148","endLine":60,"endColumn":57},{"ruleId":"145","severity":1,"message":"150","line":2,"column":17,"nodeType":"147","messageId":"148","endLine":2,"endColumn":23},{"ruleId":"145","severity":1,"message":"151","line":4,"column":8,"nodeType":"147","messageId":"148","endLine":4,"endColumn":13},{"ruleId":"145","severity":1,"message":"152","line":8,"column":8,"nodeType":"147","messageId":"148","endLine":8,"endColumn":15},{"ruleId":"145","severity":1,"message":"153","line":13,"column":3,"nodeType":"147","messageId":"148","endLine":13,"endColumn":14},{"ruleId":"145","severity":1,"message":"154","line":14,"column":3,"nodeType":"147","messageId":"148","endLine":14,"endColumn":12},{"ruleId":"145","severity":1,"message":"155","line":15,"column":3,"nodeType":"147","messageId":"148","endLine":15,"endColumn":17},{"ruleId":"145","severity":1,"message":"156","line":30,"column":8,"nodeType":"147","messageId":"148","endLine":30,"endColumn":16},{"ruleId":"145","severity":1,"message":"157","line":96,"column":9,"nodeType":"147","messageId":"148","endLine":96,"endColumn":17},{"ruleId":"158","severity":1,"message":"159","line":127,"column":6,"nodeType":"160","endLine":127,"endColumn":14,"suggestions":"161"},{"ruleId":"145","severity":1,"message":"162","line":1,"column":27,"nodeType":"147","messageId":"148","endLine":1,"endColumn":36},{"ruleId":"145","severity":1,"message":"152","line":3,"column":8,"nodeType":"147","messageId":"148","endLine":3,"endColumn":15},{"ruleId":"145","severity":1,"message":"163","line":5,"column":8,"nodeType":"147","messageId":"148","endLine":5,"endColumn":14},{"ruleId":"145","severity":1,"message":"164","line":8,"column":10,"nodeType":"147","messageId":"148","endLine":8,"endColumn":20},{"ruleId":"145","severity":1,"message":"165","line":18,"column":21,"nodeType":"147","messageId":"148","endLine":18,"endColumn":33},{"ruleId":"145","severity":1,"message":"162","line":1,"column":17,"nodeType":"147","messageId":"148","endLine":1,"endColumn":26},{"ruleId":"145","severity":1,"message":"166","line":3,"column":23,"nodeType":"147","messageId":"148","endLine":3,"endColumn":34},{"ruleId":"145","severity":1,"message":"167","line":4,"column":10,"nodeType":"147","messageId":"148","endLine":4,"endColumn":24},{"ruleId":"145","severity":1,"message":"168","line":2,"column":8,"nodeType":"147","messageId":"148","endLine":2,"endColumn":14},{"ruleId":"145","severity":1,"message":"169","line":1,"column":36,"nodeType":"147","messageId":"148","endLine":1,"endColumn":44},{"ruleId":"145","severity":1,"message":"170","line":6,"column":3,"nodeType":"147","messageId":"148","endLine":6,"endColumn":14},{"ruleId":"145","severity":1,"message":"171","line":18,"column":8,"nodeType":"147","messageId":"148","endLine":18,"endColumn":19},{"ruleId":"145","severity":1,"message":"172","line":65,"column":9,"nodeType":"147","messageId":"148","endLine":65,"endColumn":20},{"ruleId":"158","severity":1,"message":"173","line":103,"column":6,"nodeType":"160","endLine":103,"endColumn":16,"suggestions":"174"},{"ruleId":"145","severity":1,"message":"170","line":5,"column":3,"nodeType":"147","messageId":"148","endLine":5,"endColumn":14},{"ruleId":"145","severity":1,"message":"175","line":16,"column":10,"nodeType":"147","messageId":"148","endLine":16,"endColumn":27},{"ruleId":"145","severity":1,"message":"176","line":16,"column":29,"nodeType":"147","messageId":"148","endLine":16,"endColumn":43},{"ruleId":"145","severity":1,"message":"177","line":23,"column":8,"nodeType":"147","messageId":"148","endLine":23,"endColumn":18},{"ruleId":"145","severity":1,"message":"178","line":24,"column":8,"nodeType":"147","messageId":"148","endLine":24,"endColumn":14},{"ruleId":"145","severity":1,"message":"179","line":6,"column":10,"nodeType":"147","messageId":"148","endLine":6,"endColumn":31},{"ruleId":"145","severity":1,"message":"180","line":7,"column":10,"nodeType":"147","messageId":"148","endLine":7,"endColumn":14},{"ruleId":"158","severity":1,"message":"181","line":61,"column":6,"nodeType":"160","endLine":61,"endColumn":19,"suggestions":"182"},{"ruleId":"145","severity":1,"message":"183","line":3,"column":10,"nodeType":"147","messageId":"148","endLine":3,"endColumn":14},{"ruleId":"145","severity":1,"message":"184","line":3,"column":16,"nodeType":"147","messageId":"148","endLine":3,"endColumn":19},{"ruleId":"145","severity":1,"message":"185","line":10,"column":8,"nodeType":"147","messageId":"148","endLine":10,"endColumn":15},{"ruleId":"145","severity":1,"message":"186","line":22,"column":10,"nodeType":"147","messageId":"148","endLine":22,"endColumn":30},{"ruleId":"145","severity":1,"message":"187","line":64,"column":9,"nodeType":"147","messageId":"148","endLine":64,"endColumn":24},{"ruleId":"158","severity":1,"message":"188","line":136,"column":6,"nodeType":"160","endLine":136,"endColumn":19,"suggestions":"189"},{"ruleId":"145","severity":1,"message":"179","line":6,"column":10,"nodeType":"147","messageId":"148","endLine":6,"endColumn":31},{"ruleId":"145","severity":1,"message":"190","line":7,"column":16,"nodeType":"147","messageId":"148","endLine":7,"endColumn":26},{"ruleId":"158","severity":1,"message":"181","line":61,"column":6,"nodeType":"160","endLine":61,"endColumn":19,"suggestions":"191"},{"ruleId":"145","severity":1,"message":"183","line":3,"column":10,"nodeType":"147","messageId":"148","endLine":3,"endColumn":14},{"ruleId":"145","severity":1,"message":"185","line":10,"column":8,"nodeType":"147","messageId":"148","endLine":10,"endColumn":15},{"ruleId":"145","severity":1,"message":"187","line":37,"column":9,"nodeType":"147","messageId":"148","endLine":37,"endColumn":24},{"ruleId":"192","severity":1,"message":"193","line":131,"column":7,"nodeType":"194","messageId":"195","endLine":131,"endColumn":26},"no-native-reassign",["196"],"no-negated-in-lhs",["197"],"no-unused-vars","'displayDescriptionBar' is assigned a value but never used.","Identifier","unusedVar","'setDisplayDescriptionBar' is assigned a value but never used.","'useRef' is defined but never used.","'Chart' is defined but never used.","'isEmpty' is defined but never used.","'setDateFrom' is defined but never used.","'setDateTo' is defined but never used.","'setSubExpenses' is defined but never used.","'Snackbar' is defined but never used.","'alertAdd' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["198"],"'useEffect' is defined but never used.","'moment' is defined but never used.","'makeStyles' is defined but never used.","'setIsLoading' is assigned a value but never used.","'useDispatch' is defined but never used.","'setWalletTheme' is defined but never used.","'Button' is defined but never used.","'useState' is defined but never used.","'setExpenses' is defined but never used.","'ButtonGroup' is defined but never used.","'subExpenses' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'selectData'. Either include it or remove the dependency array.",["199"],"'CenterFocusStrong' is defined but never used.","'FullscreenExit' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'PlayCircleFilledWhite' is defined but never used.","'teal' is defined but never used.","React Hook useEffect has a missing dependency: 'getTotalSubExpenses'. Either include it or remove the dependency array.",["200"],"'Line' is defined but never used.","'Bar' is defined but never used.","'classes' is defined but never used.","'relativeTimeRounding' is defined but never used.","'ExpenseChartRef' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'colorList'. Either include it or remove the dependency array.",["201"],"'deepOrange' is defined but never used.",["202"],"no-dupe-keys","Duplicate key 'maintainAspectRatio'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"207","fix":"211"},"Update the dependencies array to be: [dispatch, reload]",{"range":"212","text":"213"},"Update the dependencies array to be: [expenses, selectData]",{"range":"214","text":"215"},"Update the dependencies array to be: [getTotalSubExpenses, subExpenses]",{"range":"216","text":"217"},"Update the dependencies array to be: [colorList, subExpenses]",{"range":"218","text":"219"},{"range":"220","text":"217"},[3675,3683],"[dispatch, reload]",[2578,2588],"[expenses, selectData]",[1506,1519],"[getTotalSubExpenses, subExpenses]",[3327,3340],"[colorList, subExpenses]",[1500,1513]]